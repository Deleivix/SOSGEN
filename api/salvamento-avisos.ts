import type { VercelRequest, VercelResponse } from '@vercel/node';

// The data type that reflects the columns of the table
type SalvamentoAviso = {
  num: string;
  emision: string;
  asunto: string;
  zona: string;
  tipo: string;
  subtipo: string;
  prioridad: string;
  caducidad: string;
  pdfLink: string;
};

// Simple in-memory cache
let cache = {
  data: null as SalvamentoAviso[] | null,
  timestamp: 0,
};
const CACHE_DURATION_MS = 15 * 60 * 1000; // 15 minutes

/**
 * Main handler function that performs web scraping on the official Salvamento Marítimo page.
 */
export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const now = Date.now();
  if (cache.data && (now - cache.timestamp < CACHE_DURATION_MS)) {
    return res.status(200).json(cache.data);
  }

  const targetUrl = 'https://radioavisos.salvamentomaritimo.es/';
  
  try {
    const response = await fetch(targetUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      cache: 'no-store',
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch page, status: ${response.status}`);
    }

    const html = await response.text();
    const avisos: SalvamentoAviso[] = [];

    // Regex to find all table rows with the specific classes for data.
    const rowRegex = /<tr class="rg(?:Alt)?Row"[^>]*>([\s\S]*?)<\/tr>/gi;
    const allRowMatches = html.matchAll(rowRegex);

    for (const rowMatch of allRowMatches) {
        const rowHtml = rowMatch[1];
        
        // Regex to extract all cell (<td>) content from the row.
        const cellRegex = /<td[^>]*>([\s\S]*?)<\/td>/gi;
        const cellsHtml = [...rowHtml.matchAll(cellRegex)].map(m => m[1].trim());

        // Clean up cell content by removing any HTML tags and decoding common entities.
        const cleanCells = cellsHtml.map(cell =>
            cell.replace(/<[^>]+>/g, '').replace(/&nbsp;/g, ' ').trim()
        );
        
        // Ensure the row has the expected number of columns for data.
        if (cleanCells.length >= 9) {
            avisos.push({
                num: cleanCells[1],
                emision: cleanCells[2],
                asunto: cleanCells[3],
                zona: cleanCells[4],
                tipo: cleanCells[5],
                subtipo: cleanCells[6],
                prioridad: cleanCells[7],
                caducidad: cleanCells[8],
                // The PDF link is generated by JavaScript (__doPostBack) and cannot be scraped directly.
                // As a reliable fallback, we link to the main page where the user can find the notice.
                pdfLink: targetUrl, 
            });
        }
    }

    if (avisos.length === 0) {
      console.warn("Could not parse any notices from the HTML table. The page structure might have changed or there are no notices currently listed.");
    }

    cache.data = avisos;
    cache.timestamp = now;
    return res.status(200).json(avisos);

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    console.error({
        message: "Error in /api/salvamento-avisos (scraping)",
        details: errorMessage,
        targetUrl: targetUrl
    });
    // Clear cache on error to force a refetch next time.
    cache.data = null;
    cache.timestamp = 0;
    return res.status(500).json({ 
        error: 'Failed to scrape or process data from Salvamento Marítimo page', 
        details: errorMessage
    });
  }
}